<?php
// $Id$

/**
 * @file
 * Adds the support for the italian standard MAG.
 *
 */


/**
 * This module exposes a fews hooks. Till now the only hooks are:
 *  
 * hook_fedora_after_ingest; 
 * hook_fedora_alter_ingest;
 * hook_fedora_alter_edit;
 * 
 * in naming hooks we can add at the end "_object" to refear to the fedora object
 *  
 */

/*
 * nota 1: il codice con "nota 1" importa il javascript che consente di aprire
 * una finestra modale al click sul campo dc:relation.
 * Viene creato un path nel menu e associato ad una callback (che per ora fa solo
 * un pull del contenuti della collezione in cui il partner sta inserendo gli oggetti)
 * Questo path verrÃ  invocato dalla chiamata ajax correlata al click sul campo dc:relation.
 */

    /*
     * TODO nota 1
drupal_add_js(drupal_get_path('module', 'islandora_mag') . '/dcrelations.js');
*/

/**
 * Implements hook fedora_alter_content_models_path
 * @return an addition path to our content models
 */
function islandora_mag_fedora_alter_content_models_path() {
	return drupal_get_path('module','islandora_mag') . '/content_models';
}

/**
 * Adds a menu to set some stuff
 */
function islandora_mag_menu() {
  $items['admin/settings/islandora_mag'] = array(
	  'title' => 'Islandora MAG settings',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('islandora_mag_admin_globals'),
	  'access arguments' => array('administer site configuration'),
	  'type' => MENU_NORMAL_ITEM,
		'file' => 'islandora_mag.admin.inc',
	);
	
	$items['fedora/cloneObject'] = array(
        'title' => t('Clone object'),
        'page callback' => 'islandora_mag_clone_object',
        'type' => MENU_CALLBACK,
        'access arguments' => array('add fedora datastreams')
    );
    
/*
 * The path "fedora/cloneObject" will be called e.g. from a clicked link in a block like that
 * 
    <?php
    $object_pid_full = arg(2);

    if ( arg(0) == "fedora" && arg(1) == "repository" &&  !empty($object_pid_full) ) {
    	module_load_include('module', 'islandora_mag', 'islandora_mag');
    	$coll = getAllInfoCollectionPid($object_pid_full);
    	$exploded_pid = explode(":", $object_pid_full);
    	$pid = $exploded_pid[1];

    	if ( is_numeric($pid) ) {
    		$path = drupal_get_path('module', 'islandora_mag');
    		global $base_url;

    		echo '<a title="' . t('Create a New object like that') . '"  href="' . base_path() .  'fedora/cloneObject/' . $coll['uri'] . "/" . $coll['title'] . "/-/" .  $object_pid_full  . '">';
    		echo '<img src="' . $base_url . '/' . $path .  '/images/clone.png" alt="' . t('Create a New Object like that') . '" class="icon">';
    		echo '</a>' . t('Clone it!');
    	}
    }

    ?>
 */
    
    /*
     * TODO nota 1
    $items['islandora_mag/ajax_calls/get_objects_by/%'] = array(
        'page callback' => 'islandora_mag_ajax_objects',
        'type' => MENU_CALLBACK,
        'access arguments' => array('add fedora datastreams')
    );
	
	return $items;
	*/
}

/*
 * TODO nota 1 
function islandora_mag_ajax_objects() {
	$collection_pid = arg(3);
	
	$allowed_collections = array(
		"epistemetec:mag_collection",
		"epistemetec:ci_collection",
	);
	
	if (!empty($collection_pid) && in_array($collection_pid, $allowed_collections)) {
		module_load_include('inc', 'fedora_repository', 'api/fedora_collection');
		
		$objects = get_related_items_as_array($collection_pid);
		
		return var_dump($objects);
	}
	
	return null;
}
*/


/**
 * Implementation of hook_elements():
 * Custom form element for the MAG
 */
function islandora_mag_elements() {
  $type['select_taxonomies'] = array( 
    '#input'=> TRUE,
    '#sticky ' => FALSE,
  );

  return $type;
}

/**
 * Theme element: select_taxonomies
 * @param array $element
 */
function theme_select_taxonomies($element) {
  /*
   For example, our array is:
   $element	Array [20]	
    	#title	Subject	
    	#required	0	
    	#description	An entity primarily responsible for making ...
    	#type	select_taxonomies	
    	#post	Array [0]	
    	#programmed	false	
    	#tree	false	
    	#parents	Array [1]	
    		0	dc:subject	
    	#array_parents	Array [4]	
    		0	indicator2	
    		1	metadigit	
    		2	bib	
    		3	dc:subject	
    	#weight	0.002	
    	#processed	true	
    	#attributes	Array [0]	
    	#input	true	
    	#sticky 	false	
    	#process	Array [1]	
    		0	imfe_sticky_select_process	
    	#name	dc:subject	
    	#id	edit-dc:subject	
    	#value	
    	#defaults_loaded	true	
    	#sorted	true	
   */
  
  $tid = variable_get('islandora_mag_dcsubject_taxonomy', 0);
  
  if ($tid == 0) {
  	drupal_set_message(t('Field "dc:subject" unfilled: go to the islandora_mag configuration page to set the right taxonomy.'), 'warning');
  	return null;
  }
  
  $terms = taxonomy_get_tree($tid);
  
  if (module_exists('i18ntaxonomy')) {
  	//get terms translated
    $terms = i18ntaxonomy_localize_terms($terms, array('name', 'description'));
  }

  $options = array();
  
  //in this way you can get a select with opt group
  //but we need to let user select the opt self so we can't use it
  /*
  foreach ($terms as $term) {
    if ($term->depth == 0) {
      $options[$term->tid][0] = $term->name;
      
    }
    elseif ($term->depth == 1) {
      foreach ($term->parents as $key => $parent) {
        $options[$parent][$term->tid] = $term->name;
      }
    }
  }
  */
  
  foreach ($terms as $term) {
    $choice = new stdClass();
    $choice->option = array($term->name => str_repeat('-', $term->depth) . " " . $term->name);
    $options[] = $choice;
  }
  
  //here we add taxonomies to the element's option
  $element['#options'] = $options;

  $el = '<select name="'. $element['#name'] .'" id="'. $element['#id'] .'" class="tid_' . $tid . '">';
  $el.= form_select_options($element);
  $el.= '</select>';
  
  return theme('form_element', $element, $el);
}

/**
 * Implementation of hook_theme() to register how to theme our elements.
 */
function islandora_mag_theme() {
  return array(
    'select_taxonomies' => array(
      'arguments' => array('form' => NULL),
    )
  );
}


/**
 * Implementation of hook_form_alter().
 */
function islandora_mag_form_alter(&$form, $form_state, $form_id) {
	global $language;
	
	switch ($form_id) {
		case 'fedora_repository_ingest_form':
			drupal_set_message(
				t('You\'re going to create an object that has as default language: @lang_lang / @lang_name',
				array('@lang_lang' => $language->language, '@lang_name' => $language->name)),
				"notice",
				FALSE
			);
			
			break;
	}
}



function getAllInfoCollectionPid($pid) {

	module_load_include('inc', 'fedora_repository', 'ObjectHelper');
	$object_helper = new ObjectHelper();
	$collection_objs = $object_helper->get_parent_objects($pid);
	 
	try {
		$parent_collections = new SimpleXMLElement($collection_objs);
	}
	catch (exception $e) {
		drupal_set_message(t('Error getting parent objects !e', array('!e' => $e->getMessage())));
		return;
	}

	foreach ($parent_collections->results->result as $result) {
		
		foreach ($result->object->attributes() as $a => $b) {
			if ($a == 'uri') {
				$uri = (string) $b;
				$uri = substr($uri, strpos($uri, '/')+1);
			}
		}

		$uris = array(
			'uri' => $uri,
			'title' => (string) $result->title
		);
		
	}

	return $uris;
}


function islandora_mag_clone_object( $collection_pid = NULL, $collection_label = NULL, $content_model = NULL, $source_pid = NULL ) {
  
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  if (!user_access('ingest new fedora objects')) {
    drupal_set_message(t('You do not have permission to ingest.'), 'error');
    return '';
  }

  if (!validPid($collection_pid)) {
    if (validPid(urldecode($collection_pid))) {
      $collection_pid = urldecode($collection_pid);
    } else {
      drupal_set_message(t("This collection PID $collection_pid is not valid"), 'error');
      return ' ';
    }
    
  }

  if ($collection_pid == NULL) {
    drupal_set_message(t('You must specify a collection object pid to clone an object.'), 'error');
    return '';
  }
  $output = drupal_get_form('islandora_mag_ingest_form', $collection_pid, $collection_label, $content_model, $source_pid);

  $breadcrumbs = array();
  $objectHelper = new ObjectHelper();
  $objectHelper->getBreadcrumbs($collection_pid, $breadcrumbs);
  drupal_set_breadcrumb(array_reverse($breadcrumbs));

  return $output;
}



function islandora_mag_ingest_form(&$form_state, $collection_pid, $collection_label = NULL, $content_model = NULL, $source_pid = NULL) {
	module_load_include('inc', 'fedora_repository', 'formClass');

	echo $source_pid;

	module_load_include('inc', 'fedora_repository', 'ObjectHelper');
	$oh = new ObjectHelper();

	$collinfo = $oh->get_content_models_list($source_pid);

	$form_state['storage']['step'] = 2; //comment this to pass through step 1
	$form_state['values']['step']= 1; //will be added 1
	//$form_state['storage']['content_model'] = $content_model;
	$form_state['storage']['collection_pid'] = $collection_pid;
	$form_state['storage']['source_pid'] = $source_pid;
	$form_state['values']['models'] = $collinfo[0] . "/ISLANDORACM";
	$form_state['values']['collection_pid'] =	$collection_pid;

	$ingestForm = new formClass();
	$form = $ingestForm->createIngestForm($collection_pid, $collection_label, $form_state);
	
	$form['submit'] = array(
        '#type' => 'submit',
        '#submit' => array('islandora_mag_ingest_form_submit'),
        '#value' => "Ingest"
    );
    
    return $form;
}

function islandora_mag_ingest_form_submit($form, &$form_state) {
  //only validate the form if the submit button was pressed (other buttons may be used for AHAH
  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    global $base_url;
    module_load_include('inc', 'fedora_repository', 'CollectionClass');
    module_load_include('inc', 'fedora_repository', 'CollectionPolicy');
    module_load_include('inc', 'fedora_repository', 'ContentModel');

    $contentModelPid = ContentModel::getPidFromIdentifier($form_state['values']['models']);
    $contentModelDsid = ContentModel::getDSIDFromIdentifier($form_state['values']['models']);
    $err = TRUE;
    $redirect = TRUE;
    if (($cp = CollectionPolicy::loadFromCollection($form_state['values']['collection_pid'])) !== FALSE) {
      $relationship = $cp->getRelationship();

      if (($cm = ContentModel::loadFromModel($contentModelPid, $contentModelDsid)) !== FALSE) {
        $pid = $cp->getNextPid($contentModelDsid);
        global $user;
        $form_state['values']['user_id'] = $user->name;
        $form_state['values']['pid'] = $pid;
        $form_state['values']['content_model_pid'] = $contentModelPid;
        $form_state['values']['relationship'] = $relationship;

        $err = (!$cm->execFormHandler($form_state['values'],$form_state));

        $_SESSION['fedora_ingest_files'] = ''; //empty this variable

        $attr = $cm->getIngestFormAttributes();
        $redirect = $attr['redirect'];

        if ($redirect) {
          $form_state['storage'] = NULL;
        }
      }
    }

    if ($redirect) {
      $form_state['redirect'] = ($err) ? ' ' : $base_url . "/fedora/repository/{$form_state['values']['collection_pid']}";
    }
  }
}

function islandora_mag_ingest_form_validate($form, &$form_state) {
  //only validate the form if the submit button was pressed (other buttons may be used for AHAH
  if ($form_state['clicked_button']['#id'] == 'edit-submit') {
    switch ($form_state['storage']['step']) {
      case 1:
        $form_state['storage']['step']++;
        $form_state['rebuild'] = TRUE;
        break;

      case 2:

        // Get the uploaded file.
        $validators = array();

        if (!empty($_FILES['files']['name']['ingest-file-location'])) {
          $fileObject = file_save_upload('ingest-file-location', $validators);

          file_move($fileObject->filepath, 0, 'FILE_EXISTS_RENAME');
          $form_state['values']['ingest-file-location'] = $fileObject->filepath;
        }

        if (file_exists($form_state['values']['ingest-file-location'])) {
          module_load_include('inc', 'fedora_repository', 'ContentModel');
          module_load_include('inc', 'fedora_repository', 'MimeClass');

          $file = $form_state['values']['ingest-file-location'];

          $contentModelPid = ContentModel::getPidFromIdentifier($form_state['values']['models']);
          $contentModelDsid = ContentModel::getDSIDFromIdentifier($form_state['values']['models']);

          if (($cm = ContentModel::loadFromModel($contentModelPid, $contentModelDsid)) !== FALSE) {
            $allowedMimeTypes = $cm->getMimetypes();

            $mimetype = new MimeClass();
            $dformat = $mimetype->getType($file);

            if (!empty($file)) {
              if (!in_array($dformat, $allowedMimeTypes)) {
                form_set_error('ingest-file-location', t('The uploaded file\'s mimetype (' . $dformat . ') is not associated with this Content Model. The allowed types are ' .
                                implode(' ', $allowedMimeTypes)));
                file_delete($file);
                return;
              }
              elseif (!$cm->execIngestRules($file, $dformat)) {
                drupal_set_message(t('Error following Content Model Rules'), 'error');
                foreach (ContentModel::$errors as $err) {
                  drupal_set_message($err, 'error');
                }
              }
            }
          }
        }
        $form_state['rebuild'] = FALSE;
        break;
    }
  }
}
